# Simple workflow for deploying static content to GitHub Pages
name: Generate docs directory and deploy Github Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  schedule:
    # 毎日 21:21 (JST) に実行する
    - cron: '21 12 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    env:
      GEN_HOLIDAY_API: true
      HASH_SUFFIX: v2
    outputs:
      should_deploy: ${{ steps.set_output_to_deploy.outputs.upload_artifact }}
    steps:
      # API の生成
      # CSV が更新されているか確認しつつ、キャッシュを読み込む
      - uses: actions/checkout@v3
      - name: Check CSV hash
        run: |
          export CSV_URL="https://www8.cao.go.jp/chosei/shukujitsu/syukujitsu.csv"
          export CSV_HASH=$(curl -s $CSV_URL | shasum | cut -d' ' -f 1)
          export CACHE_KEY="${CSV_HASH}-${HASH_SUFFIX}"
          echo $CACHE_KEY
          echo "CACHE_KEY=$CACHE_KEY" >> $GITHUB_ENV
          echo "THIS_YEAR=$(date +%Y)" >> $GITHUB_ENV
      - name: Cache API
        id: api_cache_id
        uses: actions/cache@v3
        with:
          path: .docs/api
          key: api--${{ env.CACHE_KEY }}-${{ env.THIS_YEAR }}
      # CSV が更新されているときだけ python ビルドする
      - name: Set up Python ${{ matrix.python-version }}
        if: steps.api_cache_id.outputs.cache-hit != 'true'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        if: steps.api_cache_id.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Build API
        if: steps.api_cache_id.outputs.cache-hit != 'true'
        id: build_api
        run: python src/main.py
      - name: Copy API files to docs
        run: |
          mkdir -p docs  # これが無いと api が docs に置き換わって PATH がおかしくなる
          cp -rf .docs/api/* docs

      # Swagger の生成
      # CSV が更新されているか確認しつつ、キャッシュを読み込む
      - name: Cache Swagger
        id: swagger_cache_id
        uses: actions/cache@v3
        with:
          path: .docs/swagger
          key: swagger--${{ hashFiles('swagger/jp-holiday.yml') }}
      - name: Checkout swagger-ui
        if: steps.swagger_cache_id.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: swagger-api/swagger-ui
          ref: 'v4.15.5'
          path: .swagger-ui
      - name: Copy Swagger files
        id: build_swagger
        if: steps.swagger_cache_id.outputs.cache-hit != 'true'
        run: |
          mkdir -p .docs/swagger
          cp .swagger-ui/dist/* .docs/swagger
          cp -f swagger/* .docs/swagger
      - name: Copy Swagger files to docs
        run: |
          mkdir -p docs/swagger-ui
          cp -f .docs/swagger/* docs/swagger-ui

      # ドキュメントの追加
      - name: Cache Documents
        id: documents_cache_id
        uses: actions/cache@v3
        with:
          path: documents
          key: documents--${{ hashFiles('documents/**') }}
      - name: Build Html by Jekyll
        if: steps.documents_cache_id.outputs.cache-hit != 'true'
        uses: actions/jekyll-build-pages@v1
        with:
          source: documents
          destination: docs

      - name: Upload artifact
        id: upload_artifact
        if : steps.build_api.conclusion != 'skipped' || steps.build_swagger.conclusion != 'skipped' || steps.build_documents.conclusion != 'skipped'
        uses: actions/upload-pages-artifact@v2
        with:
          # Upload entire repository
          path: 'docs'
      - name: Set Output to deploy
        id: set_output_to_deploy
        if: steps.upload_artifact.conclusion != 'skipped'
        run: echo "upload_artifact=true" >> "$GITHUB_OUTPUT"
  # Single deploy job since we're just deploying
  deploy:
    needs: build
    if : needs.build.outputs.should_deploy == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
